<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="MAIN" Id="{cef6c1f9-2a01-4b71-81db-f7ed4deb6965}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR
	xInit	: BOOL := TRUE;
	fbMsg	: FB_TcMessage;
	Step	: (INIT,
		IDEL,
		ENABLE_AXIS,
		ADD_AXIS_TO_GROUP,
		ENABLE_GROUP,
		PREPARE_PATH,
		MOVE_PATH,
		WAIT_TILL_NO_MOVEMENT,
		UNGROUP_GROUP,
		STOPPING,
		ERROR,
		RESETING);

	Start, Stop, Reset	: BOOL;
	Continuous			: BOOL := TRUE;
	rtStart				: R_TRIG;
	rtReset				: R_TRIG;

	buffer	: ARRAY[1..4096] OF BYTE;
	path	: MC_PATH_DATA_REF(ADR(buffer), SIZEOF(buffer));

	fbPreparePath : FB_PreparePath;

	StartPos : ST_LineSegment := (TargetPos := [200.0, 275.0], Velocity := 500.0, TransitionParam := [2(0.0)], InvokeId := 10);

	Dwell : ST_DwellTime := (DwellTime := TIME#5S0MS, InvokeId := 15);

	Point1 : ST_LineSegment := (TargetPos					:= [279.0, 512],
								Velocity					:= 1600.0,
								Acceleration				:= 20000.0,
								Deceleration				:= 20000.0,
								Jerk						:= 60000.0,
								TransitionMode				:= MC_TRANSITION_MODE.mcTransModeCornerDistanceAdvanced,
								TransitionParam				:= [0.0, 0.0],
								TransitionParameterCount	:= 2,
								InvokeId					:= 20);

	Point2 : ST_LineSegment := (TargetPos					:= [417.0, 512.0],
								Velocity					:= 1160.0,
								Acceleration				:= 20000.0,
								Deceleration				:= 20000.0,
								Jerk						:= 60000.0,
								TransitionMode				:= MC_TRANSITION_MODE.mcTransModeCornerDistanceAdvanced,
								TransitionParam				:= [20.0, 25.0],
								TransitionParameterCount	:= 2,
								InvokeId					:= 30);

	fVelFactor : LREAL := 1.0;

	fbPower			: FB_PowerAll;
	fbAddAllAxes	: FB_AddAllAxes;
	fbGroupEnable	: MC_GroupEnable;

	fbMovePath			: MC_MovePath;
	fbStop				: MC_GroupStop;
	fbUngroupAxes		: MC_UngroupAllAxes;
	fbGroupReset		: MC_GroupReset;
	fbGroupReadStatus	: MC_GroupReadStatus;
	fbGroupSetOvr		: MC_GroupSetOverride;

END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF xInit THEN
	xInit := FALSE;
	fbMsg.CreateEx(TC_EVENTS.Msg.Msg, 0);
	fbPreparePath(path := path);
END_IF

fbPower();

rtStart(CLK := Start);

CASE Step OF

	INIT:
		fbAddAllAxes(Execute := FALSE);
		fbGroupEnable(AxesGroup := stGroupRef, Execute := FALSE);
		fbMovePath(AxesGroup := stGroupRef, PathData := path, Execute := FALSE);
		Step := IDEL;

	IDEL:
		IF rtStart.Q THEN
			Step := ENABLE_AXIS;
		END_IF

	ENABLE_AXIS:
		fbPower.Enable := TRUE;

		IF fbPower.Status THEN
			Step := ADD_AXIS_TO_GROUP;
		ELSIF fbPower.Error THEN
			Step := ERROR;
			fbMsg.ipArguments.Clear();
			fbMsg.ipArguments.AddString('Error enabling axis');
			fbMsg.Send(0);
		END_IF

	ADD_AXIS_TO_GROUP:

		fbAddAllAxes(Execute := TRUE);

		IF fbAddAllAxes.Done THEN
			fbAddAllAxes(Execute := FALSE);
			Step := ENABLE_GROUP;
		ELSIF fbAddAllAxes.Error THEN
			Step := ERROR;
			fbMsg.ipArguments.Clear();
			fbMsg.ipArguments.AddString('Error adding axis to the group');
			fbMsg.Send(0);
		END_IF

	ENABLE_GROUP:

		fbGroupEnable(AxesGroup := stGroupRef, Execute := TRUE);

		IF fbGroupEnable.Done THEN
			fbGroupEnable(AxesGroup := stGroupRef, Execute := FALSE);
			Step := PREPARE_PATH;
		ELSIF fbGroupEnable.Error THEN
			Step := ERROR;
			fbMsg.ipArguments.Clear();
			fbMsg.ipArguments.AddString('Error: ').AddUDInt(fbGroupEnable.ErrorId).AddString(' enabling the group');
			fbMsg.Send(0);
		END_IF

	PREPARE_PATH:
		A_PreparePath();
		Step := MOVE_PATH;

	MOVE_PATH:

		fbMovePath(AxesGroup	:= stGroupRef,
					PathData	:= path,
					Execute		:= TRUE);

		IF fbMovePath.Done THEN
			fbMovePath(AxesGroup := stGroupRef, PathData := path, Execute := FALSE);
			Step := WAIT_TILL_NO_MOVEMENT;
		ELSIF fbMovePath.Error THEN
			Step := ERROR;
			fbMsg.ipArguments.Clear();
			fbMsg.ipArguments.AddString('Error: ').AddUDInt(fbMovePath.ErrorId).AddString(' on move path');
			fbMsg.Send(0);
		END_IF

	WAIT_TILL_NO_MOVEMENT:
		//Check that axes are not moving else we will get a position jump
		IF fbGroupReadStatus.GroupStandby OR fbGroupReadStatus.GroupErrorStop OR fbGroupReadStatus.GroupNotReady THEN
			fbUngroupAxes(AxesGroup := stGroupRef, Execute := FALSE);

			IF NOT Continuous THEN
				Step := UNGROUP_GROUP;
			ELSE
				Step := PREPARE_PATH;
			END_IF

		END_IF

	UNGROUP_GROUP:
		fbUngroupAxes(AxesGroup	:= stGroupRef,
						Execute	:= TRUE);

		IF fbUngroupAxes.Done THEN
			Step := IDEL;
		ELSIF fbUngroupAxes.Error THEN
			Step := ERROR;
			fbMsg.ipArguments.Clear();
			fbMsg.ipArguments.AddString('Error: ').AddUDInt(fbUngroupAxes.ErrorId).AddString(' on ungroup');
			fbMsg.Send(0);
		END_IF

	STOPPING:
		Stop := FALSE;
		fbStop(AxesGroup := stGroupRef, Execute := TRUE, Jerk := MC_IGNORE);

		IF fbStop.Done THEN
			fbStop(AxesGroup := stGroupRef, Execute := FALSE);
			Step := IDEL;
		ELSIF fbStop.Error THEN
			Step := ERROR;
			fbMsg.ipArguments.Clear();
			fbMsg.ipArguments.AddString('Error: ').AddUDInt(fbStop.ErrorId).AddString(' on stopping');
			fbMsg.Send(0);
		END_IF

	ERROR:
		IF rtReset.Q THEN
			Step := RESETING;
		END_IF

	RESETING:
		fbGroupReset(AxesGroup	:= stGroupRef,
					Execute		:= TRUE);

		IF fbGroupReset.Done THEN
			fbGroupReset(AxesGroup := stGroupRef, Execute := FALSE);

			IF fbGroupReadStatus.GroupDisabled THEN
				Step := IDEL;
			ELSE
				Step := INIT;
			END_IF
		END_IF
END_CASE

IF Stop AND Step <> STOPPING THEN
	Step := STOPPING;
END_IF

fbGroupReadStatus(AxesGroup := stGroupRef, Enable := TRUE);

IF fbGroupReadStatus.Error THEN
	Step := ERROR;
ELSIF NOT fbGroupReadStatus.Valid THEN
	Step := ERROR;
END_IF

fbGroupSetOvr(AxesGroup := stGroupRef, Enable := TRUE, VelFactor := fVelFactor);

IF fbGroupSetOvr.Error THEN
	Step := ERROR;
END_IF
]]></ST>
    </Implementation>
    <Action Name="A_PreparePath" Id="{b4fd4fc4-5b35-4468-a059-2e7dbf9aee1b}">
      <Implementation>
        <ST><![CDATA[path.ClearPath(); //Clear nodes that were in path

//Start Position
fbPreparePath.AddLinearAbsolute(LineSegment := StartPos);

//Dwell
fbPreparePath.AddDwellTime(DwellTime := Dwell);

//Point 1
fbPreparePath.AddLinearAbsolute(LineSegment := Point1);

//Point 2
fbPreparePath.AddLinearAbsolute(LineSegment := Point2);]]></ST>
      </Implementation>
    </Action>
  </POU>
</TcPlcObject>